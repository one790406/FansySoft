/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.blisswisdom.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.blisswisdom.model.PlusSigner;
import org.blisswisdom.model.PlusSignerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PlusSigner service. Represents a row in the &quot;bw_PlusSigner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.blisswisdom.model.PlusSignerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PlusSignerImpl}.
 * </p>
 *
 * @author Danny
 * @see PlusSignerImpl
 * @see org.blisswisdom.model.PlusSigner
 * @see org.blisswisdom.model.PlusSignerModel
 * @generated
 */
public class PlusSignerModelImpl extends BaseModelImpl<PlusSigner>
	implements PlusSignerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a plus signer model instance should use the {@link org.blisswisdom.model.PlusSigner} interface instead.
	 */
	public static final String TABLE_NAME = "bw_PlusSigner";
	public static final Object[][] TABLE_COLUMNS = {
			{ "plusSignerId", Types.BIGINT },
			{ "petitionId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "signerId", Types.BIGINT },
			{ "signerName", Types.VARCHAR },
			{ "signerType", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table bw_PlusSigner (plusSignerId LONG not null primary key,petitionId LONG,userId LONG,userName VARCHAR(75) null,signerId LONG,signerName VARCHAR(75) null,signerType VARCHAR(75) null,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table bw_PlusSigner";
	public static final String ORDER_BY_JPQL = " ORDER BY plusSigner.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bw_PlusSigner.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.blisswisdom.model.PlusSigner"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.blisswisdom.model.PlusSigner"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.blisswisdom.model.PlusSigner"),
			true);
	public static long PETITIONID_COLUMN_BITMASK = 1L;
	public static long SIGNERTYPE_COLUMN_BITMASK = 2L;
	public static long CREATEDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.blisswisdom.model.PlusSigner"));

	public PlusSignerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _plusSignerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPlusSignerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _plusSignerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PlusSigner.class;
	}

	@Override
	public String getModelClassName() {
		return PlusSigner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("plusSignerId", getPlusSignerId());
		attributes.put("petitionId", getPetitionId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("signerId", getSignerId());
		attributes.put("signerName", getSignerName());
		attributes.put("signerType", getSignerType());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long plusSignerId = (Long)attributes.get("plusSignerId");

		if (plusSignerId != null) {
			setPlusSignerId(plusSignerId);
		}

		Long petitionId = (Long)attributes.get("petitionId");

		if (petitionId != null) {
			setPetitionId(petitionId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Long signerId = (Long)attributes.get("signerId");

		if (signerId != null) {
			setSignerId(signerId);
		}

		String signerName = (String)attributes.get("signerName");

		if (signerName != null) {
			setSignerName(signerName);
		}

		String signerType = (String)attributes.get("signerType");

		if (signerType != null) {
			setSignerType(signerType);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@Override
	public long getPlusSignerId() {
		return _plusSignerId;
	}

	@Override
	public void setPlusSignerId(long plusSignerId) {
		_plusSignerId = plusSignerId;
	}

	@Override
	public long getPetitionId() {
		return _petitionId;
	}

	@Override
	public void setPetitionId(long petitionId) {
		_columnBitmask |= PETITIONID_COLUMN_BITMASK;

		if (!_setOriginalPetitionId) {
			_setOriginalPetitionId = true;

			_originalPetitionId = _petitionId;
		}

		_petitionId = petitionId;
	}

	public long getOriginalPetitionId() {
		return _originalPetitionId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public long getSignerId() {
		return _signerId;
	}

	@Override
	public void setSignerId(long signerId) {
		_signerId = signerId;
	}

	@Override
	public String getSignerName() {
		if (_signerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signerName;
		}
	}

	@Override
	public void setSignerName(String signerName) {
		_signerName = signerName;
	}

	@Override
	public String getSignerType() {
		if (_signerType == null) {
			return StringPool.BLANK;
		}
		else {
			return _signerType;
		}
	}

	@Override
	public void setSignerType(String signerType) {
		_columnBitmask |= SIGNERTYPE_COLUMN_BITMASK;

		if (_originalSignerType == null) {
			_originalSignerType = _signerType;
		}

		_signerType = signerType;
	}

	public String getOriginalSignerType() {
		return GetterUtil.getString(_originalSignerType);
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PlusSigner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PlusSigner toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PlusSigner)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PlusSignerImpl plusSignerImpl = new PlusSignerImpl();

		plusSignerImpl.setPlusSignerId(getPlusSignerId());
		plusSignerImpl.setPetitionId(getPetitionId());
		plusSignerImpl.setUserId(getUserId());
		plusSignerImpl.setUserName(getUserName());
		plusSignerImpl.setSignerId(getSignerId());
		plusSignerImpl.setSignerName(getSignerName());
		plusSignerImpl.setSignerType(getSignerType());
		plusSignerImpl.setCreateDate(getCreateDate());

		plusSignerImpl.resetOriginalValues();

		return plusSignerImpl;
	}

	@Override
	public int compareTo(PlusSigner plusSigner) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), plusSigner.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PlusSigner)) {
			return false;
		}

		PlusSigner plusSigner = (PlusSigner)obj;

		long primaryKey = plusSigner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PlusSignerModelImpl plusSignerModelImpl = this;

		plusSignerModelImpl._originalPetitionId = plusSignerModelImpl._petitionId;

		plusSignerModelImpl._setOriginalPetitionId = false;

		plusSignerModelImpl._originalSignerType = plusSignerModelImpl._signerType;

		plusSignerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PlusSigner> toCacheModel() {
		PlusSignerCacheModel plusSignerCacheModel = new PlusSignerCacheModel();

		plusSignerCacheModel.plusSignerId = getPlusSignerId();

		plusSignerCacheModel.petitionId = getPetitionId();

		plusSignerCacheModel.userId = getUserId();

		plusSignerCacheModel.userName = getUserName();

		String userName = plusSignerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			plusSignerCacheModel.userName = null;
		}

		plusSignerCacheModel.signerId = getSignerId();

		plusSignerCacheModel.signerName = getSignerName();

		String signerName = plusSignerCacheModel.signerName;

		if ((signerName != null) && (signerName.length() == 0)) {
			plusSignerCacheModel.signerName = null;
		}

		plusSignerCacheModel.signerType = getSignerType();

		String signerType = plusSignerCacheModel.signerType;

		if ((signerType != null) && (signerType.length() == 0)) {
			plusSignerCacheModel.signerType = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			plusSignerCacheModel.createDate = createDate.getTime();
		}
		else {
			plusSignerCacheModel.createDate = Long.MIN_VALUE;
		}

		return plusSignerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{plusSignerId=");
		sb.append(getPlusSignerId());
		sb.append(", petitionId=");
		sb.append(getPetitionId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", signerId=");
		sb.append(getSignerId());
		sb.append(", signerName=");
		sb.append(getSignerName());
		sb.append(", signerType=");
		sb.append(getSignerType());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.blisswisdom.model.PlusSigner");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>plusSignerId</column-name><column-value><![CDATA[");
		sb.append(getPlusSignerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>petitionId</column-name><column-value><![CDATA[");
		sb.append(getPetitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerId</column-name><column-value><![CDATA[");
		sb.append(getSignerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerName</column-name><column-value><![CDATA[");
		sb.append(getSignerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerType</column-name><column-value><![CDATA[");
		sb.append(getSignerType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PlusSigner.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PlusSigner.class
		};
	private long _plusSignerId;
	private long _petitionId;
	private long _originalPetitionId;
	private boolean _setOriginalPetitionId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private long _signerId;
	private String _signerName;
	private String _signerType;
	private String _originalSignerType;
	private Date _createDate;
	private long _columnBitmask;
	private PlusSigner _escapedModel;
}