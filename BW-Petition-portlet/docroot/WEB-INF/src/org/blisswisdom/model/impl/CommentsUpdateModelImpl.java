/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.blisswisdom.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.blisswisdom.model.CommentsUpdate;
import org.blisswisdom.model.CommentsUpdateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CommentsUpdate service. Represents a row in the &quot;bw_CommentsUpdate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.blisswisdom.model.CommentsUpdateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CommentsUpdateImpl}.
 * </p>
 *
 * @author Danny
 * @see CommentsUpdateImpl
 * @see org.blisswisdom.model.CommentsUpdate
 * @see org.blisswisdom.model.CommentsUpdateModel
 * @generated
 */
public class CommentsUpdateModelImpl extends BaseModelImpl<CommentsUpdate>
	implements CommentsUpdateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comments update model instance should use the {@link org.blisswisdom.model.CommentsUpdate} interface instead.
	 */
	public static final String TABLE_NAME = "bw_CommentsUpdate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "commentsUpdateId", Types.BIGINT },
			{ "petitionId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "commentsType", Types.VARCHAR },
			{ "commentsContent", Types.VARCHAR },
			{ "updateTime", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table bw_CommentsUpdate (commentsUpdateId LONG not null primary key,petitionId LONG,userId LONG,userName VARCHAR(75) null,commentsType VARCHAR(75) null,commentsContent VARCHAR(75) null,updateTime DATE null)";
	public static final String TABLE_SQL_DROP = "drop table bw_CommentsUpdate";
	public static final String ORDER_BY_JPQL = " ORDER BY commentsUpdate.commentsUpdateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bw_CommentsUpdate.commentsUpdateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.blisswisdom.model.CommentsUpdate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.blisswisdom.model.CommentsUpdate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.blisswisdom.model.CommentsUpdate"),
			true);
	public static long COMMENTSTYPE_COLUMN_BITMASK = 1L;
	public static long PETITIONID_COLUMN_BITMASK = 2L;
	public static long COMMENTSUPDATEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.blisswisdom.model.CommentsUpdate"));

	public CommentsUpdateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _commentsUpdateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCommentsUpdateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _commentsUpdateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CommentsUpdate.class;
	}

	@Override
	public String getModelClassName() {
		return CommentsUpdate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("commentsUpdateId", getCommentsUpdateId());
		attributes.put("petitionId", getPetitionId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("commentsType", getCommentsType());
		attributes.put("commentsContent", getCommentsContent());
		attributes.put("updateTime", getUpdateTime());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long commentsUpdateId = (Long)attributes.get("commentsUpdateId");

		if (commentsUpdateId != null) {
			setCommentsUpdateId(commentsUpdateId);
		}

		Long petitionId = (Long)attributes.get("petitionId");

		if (petitionId != null) {
			setPetitionId(petitionId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String commentsType = (String)attributes.get("commentsType");

		if (commentsType != null) {
			setCommentsType(commentsType);
		}

		String commentsContent = (String)attributes.get("commentsContent");

		if (commentsContent != null) {
			setCommentsContent(commentsContent);
		}

		Date updateTime = (Date)attributes.get("updateTime");

		if (updateTime != null) {
			setUpdateTime(updateTime);
		}
	}

	@Override
	public long getCommentsUpdateId() {
		return _commentsUpdateId;
	}

	@Override
	public void setCommentsUpdateId(long commentsUpdateId) {
		_columnBitmask = -1L;

		_commentsUpdateId = commentsUpdateId;
	}

	@Override
	public long getPetitionId() {
		return _petitionId;
	}

	@Override
	public void setPetitionId(long petitionId) {
		_columnBitmask |= PETITIONID_COLUMN_BITMASK;

		if (!_setOriginalPetitionId) {
			_setOriginalPetitionId = true;

			_originalPetitionId = _petitionId;
		}

		_petitionId = petitionId;
	}

	public long getOriginalPetitionId() {
		return _originalPetitionId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getCommentsType() {
		if (_commentsType == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentsType;
		}
	}

	@Override
	public void setCommentsType(String commentsType) {
		_columnBitmask |= COMMENTSTYPE_COLUMN_BITMASK;

		if (_originalCommentsType == null) {
			_originalCommentsType = _commentsType;
		}

		_commentsType = commentsType;
	}

	public String getOriginalCommentsType() {
		return GetterUtil.getString(_originalCommentsType);
	}

	@Override
	public String getCommentsContent() {
		if (_commentsContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentsContent;
		}
	}

	@Override
	public void setCommentsContent(String commentsContent) {
		_commentsContent = commentsContent;
	}

	@Override
	public Date getUpdateTime() {
		return _updateTime;
	}

	@Override
	public void setUpdateTime(Date updateTime) {
		_updateTime = updateTime;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CommentsUpdate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CommentsUpdate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CommentsUpdate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CommentsUpdateImpl commentsUpdateImpl = new CommentsUpdateImpl();

		commentsUpdateImpl.setCommentsUpdateId(getCommentsUpdateId());
		commentsUpdateImpl.setPetitionId(getPetitionId());
		commentsUpdateImpl.setUserId(getUserId());
		commentsUpdateImpl.setUserName(getUserName());
		commentsUpdateImpl.setCommentsType(getCommentsType());
		commentsUpdateImpl.setCommentsContent(getCommentsContent());
		commentsUpdateImpl.setUpdateTime(getUpdateTime());

		commentsUpdateImpl.resetOriginalValues();

		return commentsUpdateImpl;
	}

	@Override
	public int compareTo(CommentsUpdate commentsUpdate) {
		int value = 0;

		if (getCommentsUpdateId() < commentsUpdate.getCommentsUpdateId()) {
			value = -1;
		}
		else if (getCommentsUpdateId() > commentsUpdate.getCommentsUpdateId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CommentsUpdate)) {
			return false;
		}

		CommentsUpdate commentsUpdate = (CommentsUpdate)obj;

		long primaryKey = commentsUpdate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CommentsUpdateModelImpl commentsUpdateModelImpl = this;

		commentsUpdateModelImpl._originalPetitionId = commentsUpdateModelImpl._petitionId;

		commentsUpdateModelImpl._setOriginalPetitionId = false;

		commentsUpdateModelImpl._originalCommentsType = commentsUpdateModelImpl._commentsType;

		commentsUpdateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CommentsUpdate> toCacheModel() {
		CommentsUpdateCacheModel commentsUpdateCacheModel = new CommentsUpdateCacheModel();

		commentsUpdateCacheModel.commentsUpdateId = getCommentsUpdateId();

		commentsUpdateCacheModel.petitionId = getPetitionId();

		commentsUpdateCacheModel.userId = getUserId();

		commentsUpdateCacheModel.userName = getUserName();

		String userName = commentsUpdateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			commentsUpdateCacheModel.userName = null;
		}

		commentsUpdateCacheModel.commentsType = getCommentsType();

		String commentsType = commentsUpdateCacheModel.commentsType;

		if ((commentsType != null) && (commentsType.length() == 0)) {
			commentsUpdateCacheModel.commentsType = null;
		}

		commentsUpdateCacheModel.commentsContent = getCommentsContent();

		String commentsContent = commentsUpdateCacheModel.commentsContent;

		if ((commentsContent != null) && (commentsContent.length() == 0)) {
			commentsUpdateCacheModel.commentsContent = null;
		}

		Date updateTime = getUpdateTime();

		if (updateTime != null) {
			commentsUpdateCacheModel.updateTime = updateTime.getTime();
		}
		else {
			commentsUpdateCacheModel.updateTime = Long.MIN_VALUE;
		}

		return commentsUpdateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{commentsUpdateId=");
		sb.append(getCommentsUpdateId());
		sb.append(", petitionId=");
		sb.append(getPetitionId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", commentsType=");
		sb.append(getCommentsType());
		sb.append(", commentsContent=");
		sb.append(getCommentsContent());
		sb.append(", updateTime=");
		sb.append(getUpdateTime());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.blisswisdom.model.CommentsUpdate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>commentsUpdateId</column-name><column-value><![CDATA[");
		sb.append(getCommentsUpdateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>petitionId</column-name><column-value><![CDATA[");
		sb.append(getPetitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsType</column-name><column-value><![CDATA[");
		sb.append(getCommentsType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsContent</column-name><column-value><![CDATA[");
		sb.append(getCommentsContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updateTime</column-name><column-value><![CDATA[");
		sb.append(getUpdateTime());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CommentsUpdate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CommentsUpdate.class
		};
	private long _commentsUpdateId;
	private long _petitionId;
	private long _originalPetitionId;
	private boolean _setOriginalPetitionId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private String _commentsType;
	private String _originalCommentsType;
	private String _commentsContent;
	private Date _updateTime;
	private long _columnBitmask;
	private CommentsUpdate _escapedModel;
}