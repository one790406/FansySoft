/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.blisswisdom.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.blisswisdom.model.Attachment;
import org.blisswisdom.model.AttachmentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Attachment service. Represents a row in the &quot;bw_Attachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.blisswisdom.model.AttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AttachmentImpl}.
 * </p>
 *
 * @author Danny
 * @see AttachmentImpl
 * @see org.blisswisdom.model.Attachment
 * @see org.blisswisdom.model.AttachmentModel
 * @generated
 */
public class AttachmentModelImpl extends BaseModelImpl<Attachment>
	implements AttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a attachment model instance should use the {@link org.blisswisdom.model.Attachment} interface instead.
	 */
	public static final String TABLE_NAME = "bw_Attachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "attachmentId", Types.BIGINT },
			{ "petitionId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "attachmentEntryId", Types.BIGINT },
			{ "attachmentName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table bw_Attachment (attachmentId LONG not null primary key,petitionId LONG,userId LONG,attachmentEntryId LONG,attachmentName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table bw_Attachment";
	public static final String ORDER_BY_JPQL = " ORDER BY attachment.attachmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bw_Attachment.attachmentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.blisswisdom.model.Attachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.blisswisdom.model.Attachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.blisswisdom.model.Attachment"),
			true);
	public static long ATTACHMENTENTRYID_COLUMN_BITMASK = 1L;
	public static long PETITIONID_COLUMN_BITMASK = 2L;
	public static long ATTACHMENTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.blisswisdom.model.Attachment"));

	public AttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _attachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _attachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Attachment.class;
	}

	@Override
	public String getModelClassName() {
		return Attachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("attachmentId", getAttachmentId());
		attributes.put("petitionId", getPetitionId());
		attributes.put("userId", getUserId());
		attributes.put("attachmentEntryId", getAttachmentEntryId());
		attributes.put("attachmentName", getAttachmentName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long attachmentId = (Long)attributes.get("attachmentId");

		if (attachmentId != null) {
			setAttachmentId(attachmentId);
		}

		Long petitionId = (Long)attributes.get("petitionId");

		if (petitionId != null) {
			setPetitionId(petitionId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long attachmentEntryId = (Long)attributes.get("attachmentEntryId");

		if (attachmentEntryId != null) {
			setAttachmentEntryId(attachmentEntryId);
		}

		String attachmentName = (String)attributes.get("attachmentName");

		if (attachmentName != null) {
			setAttachmentName(attachmentName);
		}
	}

	@Override
	public long getAttachmentId() {
		return _attachmentId;
	}

	@Override
	public void setAttachmentId(long attachmentId) {
		_columnBitmask = -1L;

		_attachmentId = attachmentId;
	}

	@Override
	public long getPetitionId() {
		return _petitionId;
	}

	@Override
	public void setPetitionId(long petitionId) {
		_columnBitmask |= PETITIONID_COLUMN_BITMASK;

		if (!_setOriginalPetitionId) {
			_setOriginalPetitionId = true;

			_originalPetitionId = _petitionId;
		}

		_petitionId = petitionId;
	}

	public long getOriginalPetitionId() {
		return _originalPetitionId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getAttachmentEntryId() {
		return _attachmentEntryId;
	}

	@Override
	public void setAttachmentEntryId(long attachmentEntryId) {
		_columnBitmask |= ATTACHMENTENTRYID_COLUMN_BITMASK;

		if (!_setOriginalAttachmentEntryId) {
			_setOriginalAttachmentEntryId = true;

			_originalAttachmentEntryId = _attachmentEntryId;
		}

		_attachmentEntryId = attachmentEntryId;
	}

	public long getOriginalAttachmentEntryId() {
		return _originalAttachmentEntryId;
	}

	@Override
	public String getAttachmentName() {
		if (_attachmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentName;
		}
	}

	@Override
	public void setAttachmentName(String attachmentName) {
		_attachmentName = attachmentName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Attachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Attachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Attachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AttachmentImpl attachmentImpl = new AttachmentImpl();

		attachmentImpl.setAttachmentId(getAttachmentId());
		attachmentImpl.setPetitionId(getPetitionId());
		attachmentImpl.setUserId(getUserId());
		attachmentImpl.setAttachmentEntryId(getAttachmentEntryId());
		attachmentImpl.setAttachmentName(getAttachmentName());

		attachmentImpl.resetOriginalValues();

		return attachmentImpl;
	}

	@Override
	public int compareTo(Attachment attachment) {
		int value = 0;

		if (getAttachmentId() < attachment.getAttachmentId()) {
			value = -1;
		}
		else if (getAttachmentId() > attachment.getAttachmentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Attachment)) {
			return false;
		}

		Attachment attachment = (Attachment)obj;

		long primaryKey = attachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AttachmentModelImpl attachmentModelImpl = this;

		attachmentModelImpl._originalPetitionId = attachmentModelImpl._petitionId;

		attachmentModelImpl._setOriginalPetitionId = false;

		attachmentModelImpl._originalAttachmentEntryId = attachmentModelImpl._attachmentEntryId;

		attachmentModelImpl._setOriginalAttachmentEntryId = false;

		attachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Attachment> toCacheModel() {
		AttachmentCacheModel attachmentCacheModel = new AttachmentCacheModel();

		attachmentCacheModel.attachmentId = getAttachmentId();

		attachmentCacheModel.petitionId = getPetitionId();

		attachmentCacheModel.userId = getUserId();

		attachmentCacheModel.attachmentEntryId = getAttachmentEntryId();

		attachmentCacheModel.attachmentName = getAttachmentName();

		String attachmentName = attachmentCacheModel.attachmentName;

		if ((attachmentName != null) && (attachmentName.length() == 0)) {
			attachmentCacheModel.attachmentName = null;
		}

		return attachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{attachmentId=");
		sb.append(getAttachmentId());
		sb.append(", petitionId=");
		sb.append(getPetitionId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", attachmentEntryId=");
		sb.append(getAttachmentEntryId());
		sb.append(", attachmentName=");
		sb.append(getAttachmentName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("org.blisswisdom.model.Attachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>attachmentId</column-name><column-value><![CDATA[");
		sb.append(getAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>petitionId</column-name><column-value><![CDATA[");
		sb.append(getPetitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentEntryId</column-name><column-value><![CDATA[");
		sb.append(getAttachmentEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentName</column-name><column-value><![CDATA[");
		sb.append(getAttachmentName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Attachment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Attachment.class
		};
	private long _attachmentId;
	private long _petitionId;
	private long _originalPetitionId;
	private boolean _setOriginalPetitionId;
	private long _userId;
	private String _userUuid;
	private long _attachmentEntryId;
	private long _originalAttachmentEntryId;
	private boolean _setOriginalAttachmentEntryId;
	private String _attachmentName;
	private long _columnBitmask;
	private Attachment _escapedModel;
}