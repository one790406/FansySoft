/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.blisswisdom.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.blisswisdom.model.Petition;
import org.blisswisdom.model.PetitionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Petition service. Represents a row in the &quot;bw_Petition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.blisswisdom.model.PetitionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PetitionImpl}.
 * </p>
 *
 * @author Danny
 * @see PetitionImpl
 * @see org.blisswisdom.model.Petition
 * @see org.blisswisdom.model.PetitionModel
 * @generated
 */
public class PetitionModelImpl extends BaseModelImpl<Petition>
	implements PetitionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a petition model instance should use the {@link org.blisswisdom.model.Petition} interface instead.
	 */
	public static final String TABLE_NAME = "bw_Petition";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "petitionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "petitionNumber", Types.VARCHAR },
			{ "publishDate", Types.TIMESTAMP },
			{ "signUnit", Types.VARCHAR },
			{ "signer", Types.VARCHAR },
			{ "designee", Types.VARCHAR },
			{ "plusSign", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "explanation", Types.VARCHAR },
			{ "comments", Types.VARCHAR },
			{ "commentsByMonk", Types.VARCHAR },
			{ "commentsByManagement", Types.VARCHAR },
			{ "commentsByCEO", Types.VARCHAR },
			{ "commentsByAides", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table bw_Petition (uuid_ VARCHAR(75) null,petitionId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,petitionNumber VARCHAR(75) null,publishDate DATE null,signUnit VARCHAR(75) null,signer VARCHAR(75) null,designee VARCHAR(75) null,plusSign VARCHAR(75) null,subject VARCHAR(75) null,explanation VARCHAR(75) null,comments VARCHAR(75) null,commentsByMonk VARCHAR(75) null,commentsByManagement VARCHAR(75) null,commentsByCEO VARCHAR(75) null,commentsByAides VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table bw_Petition";
	public static final String ORDER_BY_JPQL = " ORDER BY petition.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY bw_Petition.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.blisswisdom.model.Petition"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.blisswisdom.model.Petition"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.blisswisdom.model.Petition"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PETITIONNUMBER_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static long CREATEDATE_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.blisswisdom.model.Petition"));

	public PetitionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _petitionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPetitionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _petitionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Petition.class;
	}

	@Override
	public String getModelClassName() {
		return Petition.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("petitionId", getPetitionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("petitionNumber", getPetitionNumber());
		attributes.put("publishDate", getPublishDate());
		attributes.put("signUnit", getSignUnit());
		attributes.put("signer", getSigner());
		attributes.put("designee", getDesignee());
		attributes.put("plusSign", getPlusSign());
		attributes.put("subject", getSubject());
		attributes.put("explanation", getExplanation());
		attributes.put("comments", getComments());
		attributes.put("commentsByMonk", getCommentsByMonk());
		attributes.put("commentsByManagement", getCommentsByManagement());
		attributes.put("commentsByCEO", getCommentsByCEO());
		attributes.put("commentsByAides", getCommentsByAides());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long petitionId = (Long)attributes.get("petitionId");

		if (petitionId != null) {
			setPetitionId(petitionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String petitionNumber = (String)attributes.get("petitionNumber");

		if (petitionNumber != null) {
			setPetitionNumber(petitionNumber);
		}

		Date publishDate = (Date)attributes.get("publishDate");

		if (publishDate != null) {
			setPublishDate(publishDate);
		}

		String signUnit = (String)attributes.get("signUnit");

		if (signUnit != null) {
			setSignUnit(signUnit);
		}

		String signer = (String)attributes.get("signer");

		if (signer != null) {
			setSigner(signer);
		}

		String designee = (String)attributes.get("designee");

		if (designee != null) {
			setDesignee(designee);
		}

		String plusSign = (String)attributes.get("plusSign");

		if (plusSign != null) {
			setPlusSign(plusSign);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String explanation = (String)attributes.get("explanation");

		if (explanation != null) {
			setExplanation(explanation);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		String commentsByMonk = (String)attributes.get("commentsByMonk");

		if (commentsByMonk != null) {
			setCommentsByMonk(commentsByMonk);
		}

		String commentsByManagement = (String)attributes.get(
				"commentsByManagement");

		if (commentsByManagement != null) {
			setCommentsByManagement(commentsByManagement);
		}

		String commentsByCEO = (String)attributes.get("commentsByCEO");

		if (commentsByCEO != null) {
			setCommentsByCEO(commentsByCEO);
		}

		String commentsByAides = (String)attributes.get("commentsByAides");

		if (commentsByAides != null) {
			setCommentsByAides(commentsByAides);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getPetitionId() {
		return _petitionId;
	}

	@Override
	public void setPetitionId(long petitionId) {
		_petitionId = petitionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getPetitionNumber() {
		if (_petitionNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _petitionNumber;
		}
	}

	@Override
	public void setPetitionNumber(String petitionNumber) {
		_columnBitmask |= PETITIONNUMBER_COLUMN_BITMASK;

		if (_originalPetitionNumber == null) {
			_originalPetitionNumber = _petitionNumber;
		}

		_petitionNumber = petitionNumber;
	}

	public String getOriginalPetitionNumber() {
		return GetterUtil.getString(_originalPetitionNumber);
	}

	@Override
	public Date getPublishDate() {
		return _publishDate;
	}

	@Override
	public void setPublishDate(Date publishDate) {
		_publishDate = publishDate;
	}

	@Override
	public String getSignUnit() {
		if (_signUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _signUnit;
		}
	}

	@Override
	public void setSignUnit(String signUnit) {
		_signUnit = signUnit;
	}

	@Override
	public String getSigner() {
		if (_signer == null) {
			return StringPool.BLANK;
		}
		else {
			return _signer;
		}
	}

	@Override
	public void setSigner(String signer) {
		_signer = signer;
	}

	@Override
	public String getDesignee() {
		if (_designee == null) {
			return StringPool.BLANK;
		}
		else {
			return _designee;
		}
	}

	@Override
	public void setDesignee(String designee) {
		_designee = designee;
	}

	@Override
	public String getPlusSign() {
		if (_plusSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _plusSign;
		}
	}

	@Override
	public void setPlusSign(String plusSign) {
		_plusSign = plusSign;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public String getExplanation() {
		if (_explanation == null) {
			return StringPool.BLANK;
		}
		else {
			return _explanation;
		}
	}

	@Override
	public void setExplanation(String explanation) {
		_explanation = explanation;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public String getCommentsByMonk() {
		if (_commentsByMonk == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentsByMonk;
		}
	}

	@Override
	public void setCommentsByMonk(String commentsByMonk) {
		_commentsByMonk = commentsByMonk;
	}

	@Override
	public String getCommentsByManagement() {
		if (_commentsByManagement == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentsByManagement;
		}
	}

	@Override
	public void setCommentsByManagement(String commentsByManagement) {
		_commentsByManagement = commentsByManagement;
	}

	@Override
	public String getCommentsByCEO() {
		if (_commentsByCEO == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentsByCEO;
		}
	}

	@Override
	public void setCommentsByCEO(String commentsByCEO) {
		_commentsByCEO = commentsByCEO;
	}

	@Override
	public String getCommentsByAides() {
		if (_commentsByAides == null) {
			return StringPool.BLANK;
		}
		else {
			return _commentsByAides;
		}
	}

	@Override
	public void setCommentsByAides(String commentsByAides) {
		_commentsByAides = commentsByAides;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Petition.class.getName()));
	}

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved}
	 */
	@Override
	public boolean getApproved() {
		return isApproved();
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Petition.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Petition toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Petition)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PetitionImpl petitionImpl = new PetitionImpl();

		petitionImpl.setUuid(getUuid());
		petitionImpl.setPetitionId(getPetitionId());
		petitionImpl.setCompanyId(getCompanyId());
		petitionImpl.setGroupId(getGroupId());
		petitionImpl.setUserId(getUserId());
		petitionImpl.setUserName(getUserName());
		petitionImpl.setCreateDate(getCreateDate());
		petitionImpl.setModifiedDate(getModifiedDate());
		petitionImpl.setPetitionNumber(getPetitionNumber());
		petitionImpl.setPublishDate(getPublishDate());
		petitionImpl.setSignUnit(getSignUnit());
		petitionImpl.setSigner(getSigner());
		petitionImpl.setDesignee(getDesignee());
		petitionImpl.setPlusSign(getPlusSign());
		petitionImpl.setSubject(getSubject());
		petitionImpl.setExplanation(getExplanation());
		petitionImpl.setComments(getComments());
		petitionImpl.setCommentsByMonk(getCommentsByMonk());
		petitionImpl.setCommentsByManagement(getCommentsByManagement());
		petitionImpl.setCommentsByCEO(getCommentsByCEO());
		petitionImpl.setCommentsByAides(getCommentsByAides());
		petitionImpl.setStatus(getStatus());
		petitionImpl.setStatusByUserId(getStatusByUserId());
		petitionImpl.setStatusByUserName(getStatusByUserName());
		petitionImpl.setStatusDate(getStatusDate());

		petitionImpl.resetOriginalValues();

		return petitionImpl;
	}

	@Override
	public int compareTo(Petition petition) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), petition.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Petition)) {
			return false;
		}

		Petition petition = (Petition)obj;

		long primaryKey = petition.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PetitionModelImpl petitionModelImpl = this;

		petitionModelImpl._originalUuid = petitionModelImpl._uuid;

		petitionModelImpl._originalCompanyId = petitionModelImpl._companyId;

		petitionModelImpl._setOriginalCompanyId = false;

		petitionModelImpl._originalGroupId = petitionModelImpl._groupId;

		petitionModelImpl._setOriginalGroupId = false;

		petitionModelImpl._originalPetitionNumber = petitionModelImpl._petitionNumber;

		petitionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Petition> toCacheModel() {
		PetitionCacheModel petitionCacheModel = new PetitionCacheModel();

		petitionCacheModel.uuid = getUuid();

		String uuid = petitionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			petitionCacheModel.uuid = null;
		}

		petitionCacheModel.petitionId = getPetitionId();

		petitionCacheModel.companyId = getCompanyId();

		petitionCacheModel.groupId = getGroupId();

		petitionCacheModel.userId = getUserId();

		petitionCacheModel.userName = getUserName();

		String userName = petitionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			petitionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			petitionCacheModel.createDate = createDate.getTime();
		}
		else {
			petitionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			petitionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			petitionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		petitionCacheModel.petitionNumber = getPetitionNumber();

		String petitionNumber = petitionCacheModel.petitionNumber;

		if ((petitionNumber != null) && (petitionNumber.length() == 0)) {
			petitionCacheModel.petitionNumber = null;
		}

		Date publishDate = getPublishDate();

		if (publishDate != null) {
			petitionCacheModel.publishDate = publishDate.getTime();
		}
		else {
			petitionCacheModel.publishDate = Long.MIN_VALUE;
		}

		petitionCacheModel.signUnit = getSignUnit();

		String signUnit = petitionCacheModel.signUnit;

		if ((signUnit != null) && (signUnit.length() == 0)) {
			petitionCacheModel.signUnit = null;
		}

		petitionCacheModel.signer = getSigner();

		String signer = petitionCacheModel.signer;

		if ((signer != null) && (signer.length() == 0)) {
			petitionCacheModel.signer = null;
		}

		petitionCacheModel.designee = getDesignee();

		String designee = petitionCacheModel.designee;

		if ((designee != null) && (designee.length() == 0)) {
			petitionCacheModel.designee = null;
		}

		petitionCacheModel.plusSign = getPlusSign();

		String plusSign = petitionCacheModel.plusSign;

		if ((plusSign != null) && (plusSign.length() == 0)) {
			petitionCacheModel.plusSign = null;
		}

		petitionCacheModel.subject = getSubject();

		String subject = petitionCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			petitionCacheModel.subject = null;
		}

		petitionCacheModel.explanation = getExplanation();

		String explanation = petitionCacheModel.explanation;

		if ((explanation != null) && (explanation.length() == 0)) {
			petitionCacheModel.explanation = null;
		}

		petitionCacheModel.comments = getComments();

		String comments = petitionCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			petitionCacheModel.comments = null;
		}

		petitionCacheModel.commentsByMonk = getCommentsByMonk();

		String commentsByMonk = petitionCacheModel.commentsByMonk;

		if ((commentsByMonk != null) && (commentsByMonk.length() == 0)) {
			petitionCacheModel.commentsByMonk = null;
		}

		petitionCacheModel.commentsByManagement = getCommentsByManagement();

		String commentsByManagement = petitionCacheModel.commentsByManagement;

		if ((commentsByManagement != null) &&
				(commentsByManagement.length() == 0)) {
			petitionCacheModel.commentsByManagement = null;
		}

		petitionCacheModel.commentsByCEO = getCommentsByCEO();

		String commentsByCEO = petitionCacheModel.commentsByCEO;

		if ((commentsByCEO != null) && (commentsByCEO.length() == 0)) {
			petitionCacheModel.commentsByCEO = null;
		}

		petitionCacheModel.commentsByAides = getCommentsByAides();

		String commentsByAides = petitionCacheModel.commentsByAides;

		if ((commentsByAides != null) && (commentsByAides.length() == 0)) {
			petitionCacheModel.commentsByAides = null;
		}

		petitionCacheModel.status = getStatus();

		petitionCacheModel.statusByUserId = getStatusByUserId();

		petitionCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = petitionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			petitionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			petitionCacheModel.statusDate = statusDate.getTime();
		}
		else {
			petitionCacheModel.statusDate = Long.MIN_VALUE;
		}

		return petitionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", petitionId=");
		sb.append(getPetitionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", petitionNumber=");
		sb.append(getPetitionNumber());
		sb.append(", publishDate=");
		sb.append(getPublishDate());
		sb.append(", signUnit=");
		sb.append(getSignUnit());
		sb.append(", signer=");
		sb.append(getSigner());
		sb.append(", designee=");
		sb.append(getDesignee());
		sb.append(", plusSign=");
		sb.append(getPlusSign());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", explanation=");
		sb.append(getExplanation());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", commentsByMonk=");
		sb.append(getCommentsByMonk());
		sb.append(", commentsByManagement=");
		sb.append(getCommentsByManagement());
		sb.append(", commentsByCEO=");
		sb.append(getCommentsByCEO());
		sb.append(", commentsByAides=");
		sb.append(getCommentsByAides());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("org.blisswisdom.model.Petition");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>petitionId</column-name><column-value><![CDATA[");
		sb.append(getPetitionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>petitionNumber</column-name><column-value><![CDATA[");
		sb.append(getPetitionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishDate</column-name><column-value><![CDATA[");
		sb.append(getPublishDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signUnit</column-name><column-value><![CDATA[");
		sb.append(getSignUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signer</column-name><column-value><![CDATA[");
		sb.append(getSigner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designee</column-name><column-value><![CDATA[");
		sb.append(getDesignee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>plusSign</column-name><column-value><![CDATA[");
		sb.append(getPlusSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>explanation</column-name><column-value><![CDATA[");
		sb.append(getExplanation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsByMonk</column-name><column-value><![CDATA[");
		sb.append(getCommentsByMonk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsByManagement</column-name><column-value><![CDATA[");
		sb.append(getCommentsByManagement());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsByCEO</column-name><column-value><![CDATA[");
		sb.append(getCommentsByCEO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commentsByAides</column-name><column-value><![CDATA[");
		sb.append(getCommentsByAides());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Petition.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Petition.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _petitionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _petitionNumber;
	private String _originalPetitionNumber;
	private Date _publishDate;
	private String _signUnit;
	private String _signer;
	private String _designee;
	private String _plusSign;
	private String _subject;
	private String _explanation;
	private String _comments;
	private String _commentsByMonk;
	private String _commentsByManagement;
	private String _commentsByCEO;
	private String _commentsByAides;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Petition _escapedModel;
}