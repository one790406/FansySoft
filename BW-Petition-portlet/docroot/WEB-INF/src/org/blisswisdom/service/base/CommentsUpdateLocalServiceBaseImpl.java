/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.blisswisdom.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import org.blisswisdom.model.CommentsUpdate;

import org.blisswisdom.service.CommentsUpdateLocalService;
import org.blisswisdom.service.persistence.AttachmentPersistence;
import org.blisswisdom.service.persistence.CommentsUpdatePersistence;
import org.blisswisdom.service.persistence.PetitionPersistence;
import org.blisswisdom.service.persistence.PlusSignerPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the comments update local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.blisswisdom.service.impl.CommentsUpdateLocalServiceImpl}.
 * </p>
 *
 * @author Danny
 * @see org.blisswisdom.service.impl.CommentsUpdateLocalServiceImpl
 * @see org.blisswisdom.service.CommentsUpdateLocalServiceUtil
 * @generated
 */
public abstract class CommentsUpdateLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CommentsUpdateLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.blisswisdom.service.CommentsUpdateLocalServiceUtil} to access the comments update local service.
	 */

	/**
	 * Adds the comments update to the database. Also notifies the appropriate model listeners.
	 *
	 * @param commentsUpdate the comments update
	 * @return the comments update that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CommentsUpdate addCommentsUpdate(CommentsUpdate commentsUpdate)
		throws SystemException {
		commentsUpdate.setNew(true);

		return commentsUpdatePersistence.update(commentsUpdate);
	}

	/**
	 * Creates a new comments update with the primary key. Does not add the comments update to the database.
	 *
	 * @param commentsUpdateId the primary key for the new comments update
	 * @return the new comments update
	 */
	@Override
	public CommentsUpdate createCommentsUpdate(long commentsUpdateId) {
		return commentsUpdatePersistence.create(commentsUpdateId);
	}

	/**
	 * Deletes the comments update with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param commentsUpdateId the primary key of the comments update
	 * @return the comments update that was removed
	 * @throws PortalException if a comments update with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CommentsUpdate deleteCommentsUpdate(long commentsUpdateId)
		throws PortalException, SystemException {
		return commentsUpdatePersistence.remove(commentsUpdateId);
	}

	/**
	 * Deletes the comments update from the database. Also notifies the appropriate model listeners.
	 *
	 * @param commentsUpdate the comments update
	 * @return the comments update that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CommentsUpdate deleteCommentsUpdate(CommentsUpdate commentsUpdate)
		throws SystemException {
		return commentsUpdatePersistence.remove(commentsUpdate);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CommentsUpdate.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return commentsUpdatePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.blisswisdom.model.impl.CommentsUpdateModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return commentsUpdatePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.blisswisdom.model.impl.CommentsUpdateModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return commentsUpdatePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return commentsUpdatePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return commentsUpdatePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CommentsUpdate fetchCommentsUpdate(long commentsUpdateId)
		throws SystemException {
		return commentsUpdatePersistence.fetchByPrimaryKey(commentsUpdateId);
	}

	/**
	 * Returns the comments update with the primary key.
	 *
	 * @param commentsUpdateId the primary key of the comments update
	 * @return the comments update
	 * @throws PortalException if a comments update with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CommentsUpdate getCommentsUpdate(long commentsUpdateId)
		throws PortalException, SystemException {
		return commentsUpdatePersistence.findByPrimaryKey(commentsUpdateId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return commentsUpdatePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the comments updates.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.blisswisdom.model.impl.CommentsUpdateModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of comments updates
	 * @param end the upper bound of the range of comments updates (not inclusive)
	 * @return the range of comments updates
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CommentsUpdate> getCommentsUpdates(int start, int end)
		throws SystemException {
		return commentsUpdatePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of comments updates.
	 *
	 * @return the number of comments updates
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCommentsUpdatesCount() throws SystemException {
		return commentsUpdatePersistence.countAll();
	}

	/**
	 * Updates the comments update in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param commentsUpdate the comments update
	 * @return the comments update that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CommentsUpdate updateCommentsUpdate(CommentsUpdate commentsUpdate)
		throws SystemException {
		return commentsUpdatePersistence.update(commentsUpdate);
	}

	/**
	 * Returns the attachment local service.
	 *
	 * @return the attachment local service
	 */
	public org.blisswisdom.service.AttachmentLocalService getAttachmentLocalService() {
		return attachmentLocalService;
	}

	/**
	 * Sets the attachment local service.
	 *
	 * @param attachmentLocalService the attachment local service
	 */
	public void setAttachmentLocalService(
		org.blisswisdom.service.AttachmentLocalService attachmentLocalService) {
		this.attachmentLocalService = attachmentLocalService;
	}

	/**
	 * Returns the attachment persistence.
	 *
	 * @return the attachment persistence
	 */
	public AttachmentPersistence getAttachmentPersistence() {
		return attachmentPersistence;
	}

	/**
	 * Sets the attachment persistence.
	 *
	 * @param attachmentPersistence the attachment persistence
	 */
	public void setAttachmentPersistence(
		AttachmentPersistence attachmentPersistence) {
		this.attachmentPersistence = attachmentPersistence;
	}

	/**
	 * Returns the comments update local service.
	 *
	 * @return the comments update local service
	 */
	public org.blisswisdom.service.CommentsUpdateLocalService getCommentsUpdateLocalService() {
		return commentsUpdateLocalService;
	}

	/**
	 * Sets the comments update local service.
	 *
	 * @param commentsUpdateLocalService the comments update local service
	 */
	public void setCommentsUpdateLocalService(
		org.blisswisdom.service.CommentsUpdateLocalService commentsUpdateLocalService) {
		this.commentsUpdateLocalService = commentsUpdateLocalService;
	}

	/**
	 * Returns the comments update persistence.
	 *
	 * @return the comments update persistence
	 */
	public CommentsUpdatePersistence getCommentsUpdatePersistence() {
		return commentsUpdatePersistence;
	}

	/**
	 * Sets the comments update persistence.
	 *
	 * @param commentsUpdatePersistence the comments update persistence
	 */
	public void setCommentsUpdatePersistence(
		CommentsUpdatePersistence commentsUpdatePersistence) {
		this.commentsUpdatePersistence = commentsUpdatePersistence;
	}

	/**
	 * Returns the petition local service.
	 *
	 * @return the petition local service
	 */
	public org.blisswisdom.service.PetitionLocalService getPetitionLocalService() {
		return petitionLocalService;
	}

	/**
	 * Sets the petition local service.
	 *
	 * @param petitionLocalService the petition local service
	 */
	public void setPetitionLocalService(
		org.blisswisdom.service.PetitionLocalService petitionLocalService) {
		this.petitionLocalService = petitionLocalService;
	}

	/**
	 * Returns the petition persistence.
	 *
	 * @return the petition persistence
	 */
	public PetitionPersistence getPetitionPersistence() {
		return petitionPersistence;
	}

	/**
	 * Sets the petition persistence.
	 *
	 * @param petitionPersistence the petition persistence
	 */
	public void setPetitionPersistence(PetitionPersistence petitionPersistence) {
		this.petitionPersistence = petitionPersistence;
	}

	/**
	 * Returns the plus signer local service.
	 *
	 * @return the plus signer local service
	 */
	public org.blisswisdom.service.PlusSignerLocalService getPlusSignerLocalService() {
		return plusSignerLocalService;
	}

	/**
	 * Sets the plus signer local service.
	 *
	 * @param plusSignerLocalService the plus signer local service
	 */
	public void setPlusSignerLocalService(
		org.blisswisdom.service.PlusSignerLocalService plusSignerLocalService) {
		this.plusSignerLocalService = plusSignerLocalService;
	}

	/**
	 * Returns the plus signer persistence.
	 *
	 * @return the plus signer persistence
	 */
	public PlusSignerPersistence getPlusSignerPersistence() {
		return plusSignerPersistence;
	}

	/**
	 * Sets the plus signer persistence.
	 *
	 * @param plusSignerPersistence the plus signer persistence
	 */
	public void setPlusSignerPersistence(
		PlusSignerPersistence plusSignerPersistence) {
		this.plusSignerPersistence = plusSignerPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("org.blisswisdom.model.CommentsUpdate",
			commentsUpdateLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"org.blisswisdom.model.CommentsUpdate");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CommentsUpdate.class;
	}

	protected String getModelClassName() {
		return CommentsUpdate.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = commentsUpdatePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.blisswisdom.service.AttachmentLocalService.class)
	protected org.blisswisdom.service.AttachmentLocalService attachmentLocalService;
	@BeanReference(type = AttachmentPersistence.class)
	protected AttachmentPersistence attachmentPersistence;
	@BeanReference(type = org.blisswisdom.service.CommentsUpdateLocalService.class)
	protected org.blisswisdom.service.CommentsUpdateLocalService commentsUpdateLocalService;
	@BeanReference(type = CommentsUpdatePersistence.class)
	protected CommentsUpdatePersistence commentsUpdatePersistence;
	@BeanReference(type = org.blisswisdom.service.PetitionLocalService.class)
	protected org.blisswisdom.service.PetitionLocalService petitionLocalService;
	@BeanReference(type = PetitionPersistence.class)
	protected PetitionPersistence petitionPersistence;
	@BeanReference(type = org.blisswisdom.service.PlusSignerLocalService.class)
	protected org.blisswisdom.service.PlusSignerLocalService plusSignerLocalService;
	@BeanReference(type = PlusSignerPersistence.class)
	protected PlusSignerPersistence plusSignerPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CommentsUpdateLocalServiceClpInvoker _clpInvoker = new CommentsUpdateLocalServiceClpInvoker();
}